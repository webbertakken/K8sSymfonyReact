// Styles for <FrameLayout> which is showing a border around the content.
// Depends on bootstrap4.
//
// Author: WebberTakken <webber@takken.io>

// Defaults
$frame-background-color: transparent !default;
$frame-border-dark-color: #007331 !default;
$frame-border-bright-color: #aa1337 !default;
$frame-animation-time: 13.37s !default;
$frame-border-sizes: (
  xl: 18px,
  lg: 15px,
  md: 12px,
  sm: 9px,
  xs: 6px,
) !default;

// Mixins
@mixin respond-to($breakpoint) {
  // If breakpoint exists in bootstrap
  @if (map-has-key($grid-breakpoints, $breakpoint)) {
    // Include given content in that breakpoint
    @include media-breakpoint-down($breakpoint) {
      @content;
    }
  }
}

// Placeholders
%frame-border {
  border: solid transparent;
  // Adapt border to all screen sizes
  transition: border-width .3s;
  @each $breakpoint, $border-size in $frame-border-sizes {
    @include respond-to($breakpoint) {
      border-width: $border-size;
    }
  }
}

// Styles
#layout {
  display: flex;

  // Animation
  @keyframes fadeInFadeOut {
    0% { opacity: 0 }
    50% { opacity: 1 }
    100% { opacity: 0 }
  }

  #frame {
    @extend %frame-border;
    position: fixed;
    width: 100%;
    height: 100vh;
    z-index: 100;
    pointer-events: none;
    border-image: linear-gradient(135deg, $frame-border-dark-color, $frame-border-bright-color) 1;

    &::before,
    &::after {
      content: "";
      display: block;
      position: absolute;
      width: 100%;
      height: 100%;
    }

    &::before {
      @extend %frame-border;
      box-sizing: content-box;
      border-image: linear-gradient(135deg, $frame-border-bright-color, $frame-border-dark-color) 1;

      // Animation
      opacity: 0;
      will-change: opacity;
      animation: fadeInFadeOut $frame-animation-time ease-in-out infinite;

      // Adapt margin to all screen sizes
      transition: margin .3s;
      @each $breakpoint, $border-size in $frame-border-sizes {
        @include respond-to($breakpoint) {
          margin: -$border-size;
        }
      }

    }

    &::after {
      box-sizing: border-box;

      // Adapt shadow size to the size of the border
      transition: box-shadow .3s;
      @each $breakpoint, $border-size in $frame-border-sizes {
        @include respond-to($breakpoint) {
          box-shadow: 0 0 $border-size #000000;
        }
      }
    }
  }

  #content {
    background-color: $frame-background-color;
    min-height: 100vh;

    // Adapt padding to #frame's border, by screen size
    transition: padding .3s;
    @each $breakpoint, $border-size in $frame-border-sizes {
      @include respond-to($breakpoint) {
        padding: $border-size;
      }
    }
  }
}
